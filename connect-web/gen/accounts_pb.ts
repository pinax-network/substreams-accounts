// @generated by protoc-gen-es v1.0.0 with parameter "target=ts"
// @generated from file accounts.proto (package antelope.accounts.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message antelope.accounts.v1.Accounts
 */
export class Accounts extends Message<Accounts> {
  /**
   * @generated from field: repeated antelope.accounts.v1.Account accounts = 1;
   */
  accounts: Account[] = [];

  constructor(data?: PartialMessage<Accounts>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "antelope.accounts.v1.Accounts";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "accounts", kind: "message", T: Account, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Accounts {
    return new Accounts().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Accounts {
    return new Accounts().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Accounts {
    return new Accounts().fromJsonString(jsonString, options);
  }

  static equals(a: Accounts | PlainMessage<Accounts> | undefined, b: Accounts | PlainMessage<Accounts> | undefined): boolean {
    return proto3.util.equals(Accounts, a, b);
  }
}

/**
 * @generated from message antelope.accounts.v1.Account
 */
export class Account extends Message<Account> {
  /**
   * account name
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * account creator
   *
   * @generated from field: string creator = 2;
   */
  creator = "";

  /**
   * account creation time stamp
   *
   * @generated from field: google.protobuf.Timestamp timestamp = 3;
   */
  timestamp?: Timestamp;

  /**
   * owner permission public key
   *
   * @generated from field: string owner_public_key = 4;
   */
  ownerPublicKey = "";

  /**
   * active permission public key
   *
   * @generated from field: string active_public_key = 5;
   */
  activePublicKey = "";

  /**
   * amount of RAM bought
   *
   * @generated from field: uint32 ram_bytes = 6;
   */
  ramBytes = 0;

  /**
   * transaction id
   *
   * @generated from field: string trx_id = 7;
   */
  trxId = "";

  /**
   * order within the transaction
   *
   * @generated from field: uint32 ordinal = 8;
   */
  ordinal = 0;

  constructor(data?: PartialMessage<Account>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "antelope.accounts.v1.Account";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "timestamp", kind: "message", T: Timestamp },
    { no: 4, name: "owner_public_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "active_public_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "ram_bytes", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 7, name: "trx_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "ordinal", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Account {
    return new Account().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Account {
    return new Account().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Account {
    return new Account().fromJsonString(jsonString, options);
  }

  static equals(a: Account | PlainMessage<Account> | undefined, b: Account | PlainMessage<Account> | undefined): boolean {
    return proto3.util.equals(Account, a, b);
  }
}

